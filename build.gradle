plugins {
    id "java"
    id "jigsaw"
    id "com.github.johnrengelman.shadow"
}
loom {
//    splitEnvironmentSourceSets()
    mods {
        "example-mod" { //TODO: Fix
            sourceSet sourceSets.main
            //sourceSet sourceSets.client
        }
    }
    accessWidenerPath = file("src/main/resources/cosmic-api.manipulator")
}
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}
sourceSets {
    main {
        java {
            srcDirs "src/main/java"
            srcDirs "api/src/main/java"
        }
        resources {
            srcDirs "src/main/resources"
            srcDirs "api/src/main/resources"
        }
    }
	//client {
	//    java {
    //        srcDirs "src/client/java"
    //        srcDirs "api/src/client/java"
    //    }
    //    resources {
    //        srcDirs "src/client/resources"
    //        srcDirs "api/src/client/resources"
    //    }
	//}

}
repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    cosmicReach("finalforeach:cosmicreach:${cosmic_reach_version}")
    implementation ("com.github.PuzzlesHQ:puzzle-loader-cosmic:${puzzle_cosmic_version}")
}
processResources() {
    duplicatesStrategy = 'EXCLUDE'
}

processResources {
    // Locations of where to inject the properties
    def resourceTargets = [ "puzzle.mod.json" ]

    // Left item is the name in the target, right is the varuable name
    def replaceProperties = [
            "mod_version"     : version,
            "mod_desc"       :  desc,
            "version"       :  project.version,
//            "cr_version"          : cosmic_reach_version,
    ]


    inputs.properties replaceProperties
    replaceProperties.put "project", project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}